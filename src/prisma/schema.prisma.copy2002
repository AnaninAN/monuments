generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  USER
}

enum Status {
  ACTIVE
  ARCHIVE
}

model User {
  id         String   @id @default(cuid())
  name       String
  lastname   String
  surname    String?
  email      String   @unique
  emailVerified DateTime?
  password   String
  jobTitle   String?
  image      String?
  phoneNumber String?
  accounts   Account[]
  sessions   Session[]
  Authenticator Authenticator[]
  role       Role     @default(USER)
  status     Status   @default(ACTIVE)
  isTwoFactorEnabled  Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model VerificationToken {
  id                      String  @id @default(cuid())
  email                   String
  token                   String  @unique
  expires                 DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id                      String  @id @default(cuid())
  email                   String
  token                   String  @unique
  expires                 DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id                      String  @id @default(cuid())
  email                   String
  token                   String  @unique
  expires                 DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id                      String  @id @default(cuid())
  userId                  String  @unique
  user                    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Material {
  id                      String          @id @default(cuid())
  image                   String?
  name                    String                @unique
  article                 String?
  priceIn                 Int
  minBalance              Int?
  comment                 String?
  
  materialGroupId         Int
  materialGroup           MaterialGroup         @relation(fields: [materialGroupId], references: [id])
  
  unitId                  String
  unit                    Unit                  @relation(fields: [unitId], references: [id])

  supplierId              String?
  supplier                Counterparty?         @relation(fields: [supplierId], references: [id])

  warehousId              String?
  warehous                Warehous?             @relation(fields: [warehousId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Detail {
  id                      String          @id @default(cuid())
  image                   String?
  name                    String                @unique
  article                 String?
  minBalance              Int?
  comment                 String?
  
  detailGroupId           Int
  detailGroup             DetailGroup             @relation(fields: [detailGroupId], references: [id])
  
  unitId                  String
  unit                    Unit                  @relation(fields: [unitId], references: [id])

  supplierId              String?
  supplier                Counterparty?         @relation(fields: [supplierId], references: [id])

  warehousId              String?
  warehous                Warehous?             @relation(fields: [warehousId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                      String          @id @default(cuid())
  image                   String?
  name                    String                @unique
  article                 String?
  minBalance              Int?
  comment                 String?
  
  productGroupId          Int
  productGroup            ProductGroup           @relation(fields: [productGroupId], references: [id])
  
  unitId                  String
  unit                    Unit                  @relation(fields: [unitId], references: [id])

  supplierId              String?
  supplier                Counterparty?         @relation(fields: [supplierId], references: [id])

  warehousId              String?
  warehous                Warehous?             @relation(fields: [warehousId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MaterialGroup {
  id                      Int          @id @default(autoincrement())
  name                    String
  parentGroup             Int                   @default(1)

  material                Material[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DetailGroup {
  id                      Int          @id @default(autoincrement())
  name                    String
  parentGroup             Int                   @default(1)

  detail                  Detail[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductGroup {
  id                      Int          @id @default(autoincrement())
  name                    String
  parentGroup             Int                   @default(1)

  product                 Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Counterparty {
  id                      String          @id @default(cuid())
  name                    String
  
  counterpartyTypeId      String
  counterpartyType        CounterpartyType      @relation(fields: [counterpartyTypeId], references: [id])

  legalAddress            String?
  phone                   String?
  email                   String?
  INN                     String?
  KPP                     String?
  OGRN                    String?
  comment                 String?

  material                Material[]
  detail                  Detail[]
  product                 Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unit {
  id                      String          @id @default(cuid())
  name                    String
  status                  Boolean               @default(true)
  
  material                Material[]
  detail                  Detail[]
  product                 Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CounterpartyType {
  id                      String          @id @default(cuid())
  name                    String
  status                  Boolean               @default(true)
  comment                 String?

  counterparty            Counterparty[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Warehous {
  id                      String          @id @default(cuid())
  name                    String
  shortName               String
  comment                 String?
  
  material                Material[]
  detail                  Detail[]
  product                 Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}