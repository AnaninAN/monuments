generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  OPERATOR
}

enum Status {
  ACTIVE
  ARCHIVE
}

model User {
  id         String   @id @default(cuid())
  idInt      Int      @unique
  name       String
  lastname   String
  surname    String   @default("")
  email      String   @unique
  emailVerified DateTime?
  password   String
  jobTitle   String   @default("")
  image      String   @default("")
  phoneNumber String  @default("")
  sessions   Session[]
  Authenticator Authenticator[]
  role       Role     @default(OPERATOR)
  status     Status   @default(ACTIVE)
  isTwoFactorEnabled  Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}

model Authenticator {
  credentialID         String    @unique
  userId               String
  providerAccountId    Int
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model VerificationToken {
  id         String   @id @default(cuid())
  email      String
  token      String  @unique
  expires                 DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  email      String
  token      String  @unique
  expires    DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id         String   @id @default(cuid())
  email      String
  token      String  @unique
  expires    DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id         String   @id @default(cuid())
  userId     String  @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Counterparty {
  id                      Int               @id @default(autoincrement())
  name                    String            @unique
  status                  Status            @default(ACTIVE)

  counterpartyTypeId      Int
  counterpartyType        CounterpartyType  @relation(fields: [counterpartyTypeId], references: [id])

  legalAddress            String            @default("")
  phone                   String            @default("")
  email                   String            @default("")
  INN                     String            @default("")
  KPP                     String            @default("")
  OGRN                    String            @default("")
  comment                 String            @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unit {
  id                      Int     @id @default(autoincrement())
  name                    String  @unique
  status                  Status  @default(ACTIVE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CounterpartyType {
  id                      Int     @id @default(autoincrement())
  name                    String  @unique
  status                  Status  @default(ACTIVE)
  comment                 String  @default("")

  counterparty            Counterparty[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Warehouse {
  id                      Int     @id @default(autoincrement())
  name                    String  @unique
  shortName               String?
  status                  Status  @default(ACTIVE)
  comment                 String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int     @id @default(autoincrement())
  kod         String  @unique
  name        String  @unique
  price_in    Int     @default(0)
  price_out   Int     @default(0)
  count       Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}