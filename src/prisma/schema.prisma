generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  idInt                   Int                      @unique
  name                    String
  lastname                String
  surname                 String                   @default("")
  email                   String                   @unique
  emailVerified           DateTime?
  password                String
  jobTitle                String                   @default("")
  image                   String                   @default("")
  phoneNumber             String                   @default("")
  role                    Role                     @default(OPERATOR)
  status                  Status                   @default(ACTIVE)
  isTwoFactorEnabled      Boolean                  @default(false)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  Authenticator           Authenticator[]
  notifications           Notification[]
  notificationPreferences NotificationPreference[]
  assignedTasks           ServiceTask[]
  sessions                Session[]
  twoFactorConfirmation   TwoFactorConfirmation?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    Int
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Counterparty {
  id                 Int              @id @default(autoincrement())
  name               String           @unique
  status             Status           @default(ACTIVE)
  legalAddress       String           @default("")
  phone              String           @default("")
  email              String           @default("")
  INN                String           @default("")
  KPP                String           @default("")
  OGRN               String           @default("")
  comment            String           @default("")
    
  counterpartyTypeId Int
  counterpartyType   CounterpartyType @relation(fields: [counterpartyTypeId], references: [id])
  orders             Order[]

  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([counterpartyTypeId], map: "Counterparty_counterpartyTypeId_fkey")
}

model Unit {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  status    Status     @default(ACTIVE)
  comment   String     @default("")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  detail    Detail[]
  material  Material[]
  product   Product[]
}

model CounterpartyType {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  status       Status         @default(ACTIVE)
  comment      String         @default("")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  counterparty Counterparty[]
}

model Warehouse {
  id               Int             @id @default(autoincrement())
  name             String          @unique
  shortName        String          @default("")
  status           Status          @default(ACTIVE)
  comment          String          @default("")
  warehouseGroupId Int
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  detail           Detail[]
  material         Material[]
  product          Product[]
  movements        StockMovement[]
  warehouseGroup   WarehouseGroup  @relation(fields: [warehouseGroupId], references: [id])

  @@index([warehouseGroupId], map: "Warehouse_warehouseGroupId_fkey")
}

model Product {
  id               Int               @id @default(autoincrement())
  kod              String            @unique
  name             String            @unique
  description      String            @default("")
  priceIn          Int               @default(0)
  priceOut         Int               @default(0)
  count            Int               @default(0)
  status           Status            @default(ACTIVE)
  comment          String            @default("")
  image            String            @default("")
  article          String            @default("")
  minBalance       Int               @default(0)
  unitId           Int
  warehouseId      Int?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  unit             Unit              @relation(fields: [unitId], references: [id])
  warehouse        Warehouse?        @relation(fields: [warehouseId], references: [id])
  details          ProductDetail[]
  materials        ProductMaterial[]
  services         ProductService[]
  productionOrders ProductionOrder[]

  @@index([warehouseId])
  @@index([unitId], map: "Product_unitId_fkey")
}

model Detail {
  id          Int              @id @default(autoincrement())
  kod         String           @unique
  name        String           @unique
  description String           @default("")
  priceIn     Int              @default(0)
  priceOut    Int              @default(0)
  count       Int              @default(0)
  status      Status           @default(ACTIVE)
  comment     String           @default("")
  image       String           @default("")
  article     String           @default("")
  minBalance  Int              @default(0)
  unitId      Int
  warehouseId Int?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  unit        Unit             @relation(fields: [unitId], references: [id])
  warehouse   Warehouse?       @relation(fields: [warehouseId], references: [id])
  materials   DetailMaterial[]
  services    DetailService[]
  products    ProductDetail[]

  @@index([warehouseId])
  @@index([unitId], map: "Detail_unitId_fkey")
}

model Service {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String           @default("")
  price       Int              @default(0)
  status      Status           @default(ACTIVE)
  comment     String           @default("")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  details     DetailService[]
  products    ProductService[]
  tasks       ServiceTask[]
}

model ProductMaterial {
  id         Int      @id @default(autoincrement())
  productId  Int
  materialId Int
  quantity   Int
  price      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  material   Material @relation(fields: [materialId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([productId, materialId])
  @@index([productId])
  @@index([materialId])
}

model ProductDetail {
  id        Int      @id @default(autoincrement())
  productId Int
  detailId  Int
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  detail    Detail   @relation(fields: [detailId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([productId, detailId])
  @@index([productId])
  @@index([detailId])
}

model ProductService {
  id        Int      @id @default(autoincrement())
  productId Int
  serviceId Int
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])

  @@unique([productId, serviceId])
  @@index([productId])
  @@index([serviceId])
}

model DetailMaterial {
  id         Int      @id @default(autoincrement())
  detailId   Int
  materialId Int
  quantity   Int
  price      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  detail     Detail   @relation(fields: [detailId], references: [id])
  material   Material @relation(fields: [materialId], references: [id])

  @@unique([detailId, materialId])
  @@index([detailId])
  @@index([materialId])
}

model DetailService {
  id        Int      @id @default(autoincrement())
  detailId  Int
  serviceId Int
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  detail    Detail   @relation(fields: [detailId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])

  @@unique([detailId, serviceId])
  @@index([detailId])
  @@index([serviceId])
}

model Material {
  id                 Int                 @id @default(autoincrement())
  image              String              @default("")
  name               String              @unique
  article            String              @default("")
  priceIn            Int                 @default(0)
  priceOut           Int                 @default(0)
  count              Int                 @default(0)
  minBalance         Int                 @default(0)
  comment            String              @default("")
  status             Status              @default(ACTIVE)
  materialGroupId    Int
  unitId             Int
  warehouseId        Int?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  detailMaterials    DetailMaterial[]
  materialGroup      MaterialGroup       @relation(fields: [materialGroupId], references: [id])
  unit               Unit                @relation(fields: [unitId], references: [id])
  warehouse          Warehouse?          @relation(fields: [warehouseId], references: [id])
  movements          MaterialMovement[]
  operationMaterials OperationMaterial[]
  productMaterials   ProductMaterial[]

  @@index([warehouseId])
  @@index([materialGroupId], map: "Material_materialGroupId_fkey")
  @@index([unitId], map: "Material_unitId_fkey")
}

model MaterialMovement {
  id         Int          @id @default(autoincrement())
  materialId Int
  type       MovementType
  quantity   Int
  price      Int
  comment    String       @default("")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  material   Material     @relation(fields: [materialId], references: [id])

  @@index([materialId])
}

model MaterialGroup {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  parentId  Int        @default(1)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  material  Material[]
}

model WarehouseGroup {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  parentId  Int         @default(1)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  warehouse Warehouse[]
}

model PriceHistory {
  id         Int        @id @default(autoincrement())
  entityType EntityType
  entityId   Int
  priceType  PriceType
  price      Int
  startDate  DateTime
  endDate    DateTime?
  comment    String     @default("")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([entityType, entityId])
}

model StockMovement {
  id          Int          @id @default(autoincrement())
  entityType  EntityType
  entityId    Int
  type        MovementType
  quantity    Int
  price       Int
  comment     String       @default("")
  warehouseId Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  warehouse   Warehouse?   @relation(fields: [warehouseId], references: [id])

  @@index([entityType, entityId])
  @@index([warehouseId])
}

model Order {
  id             Int          @id @default(autoincrement())
  number         String       @unique
  type           OrderType
  status         OrderStatus
  date           DateTime
  deliveryDate   DateTime?
  totalAmount    Int
  comment        String       @default("")
  counterpartyId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  documents      Document[]
  counterparty   Counterparty @relation(fields: [counterpartyId], references: [id])
  items          OrderItem[]
  payments       Payment[]

  @@index([counterpartyId])
}

model OrderItem {
  id         Int        @id @default(autoincrement())
  entityType EntityType
  entityId   Int
  quantity   Int
  price      Int
  amount     Int
  comment    String     @default("")
  orderId    Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  order      Order      @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([entityType, entityId])
}

model Payment {
  id        Int           @id @default(autoincrement())
  amount    Int
  date      DateTime
  type      PaymentType
  status    PaymentStatus
  comment   String        @default("")
  orderId   Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  order     Order         @relation(fields: [orderId], references: [id])

  @@index([orderId])
}

model ProductionOrder {
  id                Int                   @id @default(autoincrement())
  number            String                @unique
  status            ProductionOrderStatus
  startDate         DateTime
  endDate           DateTime?
  quantity          Int
  completedQuantity Int                   @default(0)
  comment           String                @default("")
  productId         Int
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  operations        ProductionOperation[]
  product           Product               @relation(fields: [productId], references: [id])
  qualityChecks     QualityCheck[]

  @@index([productId])
}

model ProductionOperation {
  id                Int                       @id @default(autoincrement())
  sequence          Int
  name              String
  description       String                    @default("")
  status            ProductionOperationStatus
  startDate         DateTime?
  endDate           DateTime?
  quantity          Int
  completedQuantity Int                       @default(0)
  comment           String                    @default("")
  productionOrderId Int
  workCenterId      Int?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  materials         OperationMaterial[]
  tools             OperationTool[]
  productionOrder   ProductionOrder           @relation(fields: [productionOrderId], references: [id])
  workCenter        WorkCenter?               @relation(fields: [workCenterId], references: [id])

  @@index([productionOrderId])
  @@index([workCenterId])
}

model WorkCenter {
  id          Int                   @id @default(autoincrement())
  name        String                @unique
  description String                @default("")
  status      Status                @default(ACTIVE)
  capacity    Int                   @default(1)
  comment     String                @default("")
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  operations  ProductionOperation[]
  tools       Tool[]
}

model Tool {
  id           Int             @id @default(autoincrement())
  name         String          @unique
  description  String          @default("")
  status       Status          @default(ACTIVE)
  comment      String          @default("")
  workCenterId Int?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  operations   OperationTool[]
  workCenter   WorkCenter?     @relation(fields: [workCenterId], references: [id])

  @@index([workCenterId])
}

model OperationMaterial {
  id          Int                 @id @default(autoincrement())
  quantity    Int
  comment     String              @default("")
  operationId Int
  materialId  Int
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  material    Material            @relation(fields: [materialId], references: [id])
  operation   ProductionOperation @relation(fields: [operationId], references: [id])

  @@unique([operationId, materialId])
  @@index([operationId])
  @@index([materialId])
}

model OperationTool {
  id          Int                 @id @default(autoincrement())
  comment     String              @default("")
  operationId Int
  toolId      Int
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  operation   ProductionOperation @relation(fields: [operationId], references: [id])
  tool        Tool                @relation(fields: [toolId], references: [id])

  @@unique([operationId, toolId])
  @@index([operationId])
  @@index([toolId])
}

model QualityCheck {
  id                Int                @id @default(autoincrement())
  type              QualityCheckType
  status            QualityCheckStatus
  date              DateTime
  quantity          Int
  checkedQuantity   Int
  passedQuantity    Int
  comment           String             @default("")
  productionOrderId Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  productionOrder   ProductionOrder    @relation(fields: [productionOrderId], references: [id])

  @@index([productionOrderId])
}

model Document {
  id        Int            @id @default(autoincrement())
  type      DocumentType
  number    String         @unique
  date      DateTime
  status    DocumentStatus
  fileUrl   String
  comment   String         @default("")
  orderId   Int?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  order     Order?         @relation(fields: [orderId], references: [id])

  @@index([orderId])
}

model Batch {
  id             Int            @id @default(autoincrement())
  number         String         @unique
  entityType     EntityType
  entityId       Int
  quantity       Int
  productionDate DateTime
  expiryDate     DateTime?
  status         BatchStatus
  comment        String         @default("")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  serialNumbers  SerialNumber[]

  @@index([entityType, entityId])
}

model SerialNumber {
  id         Int                @id @default(autoincrement())
  number     String             @unique
  entityType EntityType
  entityId   Int
  status     SerialNumberStatus
  comment    String             @default("")
  batchId    Int?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  batch      Batch?             @relation(fields: [batchId], references: [id])

  @@index([entityType, entityId])
  @@index([batchId])
}

model StockAlert {
  id            Int            @id @default(autoincrement())
  entityType    EntityType
  entityId      Int
  type          StockAlertType
  threshold     Int
  currentValue  Int
  isActive      Boolean        @default(true)
  comment       String         @default("")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]

  @@index([entityType, entityId])
}

model Notification {
  id           Int                  @id @default(autoincrement())
  type         NotificationType
  title        String
  message      String
  priority     NotificationPriority
  status       NotificationStatus
  readAt       DateTime?
  comment      String               @default("")
  userId       String?
  stockAlertId Int?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  stockAlert   StockAlert?          @relation(fields: [stockAlertId], references: [id])
  user         User?                @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([stockAlertId])
}

model NotificationPreference {
  id        Int                  @id @default(autoincrement())
  type      NotificationType
  priority  NotificationPriority
  isEnabled Boolean              @default(true)
  comment   String               @default("")
  userId    String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  user      User                 @relation(fields: [userId], references: [id])

  @@unique([userId, type, priority])
  @@index([userId])
}

model ServiceTask {
  id              Int               @id @default(autoincrement())
  name            String
  description     String            @default("")
  status          ServiceTaskStatus @default(PENDING)
  startDate       DateTime?
  endDate         DateTime?
  plannedDuration Int
  comment         String            @default("")
  serviceId       Int
  assignedToId    String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  assignedTo      User              @relation(fields: [assignedToId], references: [id])
  service         Service           @relation(fields: [serviceId], references: [id])

  @@index([serviceId])
  @@index([assignedToId])
}

enum Role {
  OWNER
  ADMIN
  OPERATOR
}

enum Status {
  ACTIVE
  ARCHIVE
}

enum EntityType {
  MATERIAL
  DETAIL
  PRODUCT
  SERVICE
}

enum MovementType {
  IN
  OUT
  TRANSFER
}

enum OrderType {
  SALE
  PURCHASE
}

enum OrderStatus {
  DRAFT
  CONFIRMED
  IN_PROCESS
  COMPLETED
  CANCELLED
}

enum StockAlertType {
  LOW_STOCK
  REORDER_POINT
  EXPIRY
  OVERSTOCK
}

enum NotificationType {
  STOCK_ALERT
  ORDER_STATUS
  PRODUCTION_STATUS
  QUALITY_ALERT
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
}

enum NotificationStatus {
  NEW
  READ
  ARCHIVED
}

enum PaymentType {
  CASH
  BANK
  CARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum DocumentType {
  INVOICE
  DELIVERY_NOTE
  QUALITY_CERTIFICATE
}

enum DocumentStatus {
  DRAFT
  CONFIRMED
  ARCHIVED
}

enum ProductionOrderStatus {
  PLANNED
  IN_PROCESS
  COMPLETED
  CANCELLED
}

enum ProductionOperationStatus {
  PLANNED
  IN_PROCESS
  COMPLETED
}

enum QualityCheckType {
  INCOMING
  IN_PROCESS
  FINAL
}

enum QualityCheckStatus {
  PENDING
  PASSED
  FAILED
}

enum BatchStatus {
  ACTIVE
  USED
  EXPIRED
}

enum SerialNumberStatus {
  NEW
  IN_USE
  SCRAPPED
}

enum PriceType {
  IN
  OUT
}

enum ServiceTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
