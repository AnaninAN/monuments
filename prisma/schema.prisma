generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  OPERATOR
}

enum Status {
  ACTIVE
  ARCHIVE
}

model User {
  id                      String                   @id @default(cuid())
  idInt                   Int                      @unique
  name                    String
  lastname                String
  surname                 String                   @default("")
  email                   String                   @unique
  emailVerified           DateTime?
  password                String
  jobTitle                String                   @default("")
  image                   String                   @default("")
  phoneNumber             String                   @default("")
  role                    Role                     @default(OPERATOR)
  status                  Status                   @default(ACTIVE)
  isTwoFactorEnabled      Boolean                  @default(false)
  
  Authenticator           Authenticator[]
  sessions                Session[]
  twoFactorConfirmation   TwoFactorConfirmation?

  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    Int
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique  
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CounterpartyType {
  id             Int            @id @default(autoincrement())
  name           String         @unique
  status         Status         @default(ACTIVE)
  comment        String         @default("")
  
  counterparties Counterparty[]

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}
model Counterparty {
  id                 Int              @id @default(autoincrement())
  name               String           @unique
  status             Status           @default(ACTIVE)
  legalAddress       String           @default("")
  phone              String           @default("")
  email              String           @default("")
  INN                String           @default("")
  KPP                String           @default("")
  OGRN               String           @default("")
  comment            String           @default("")
  counterpartyTypeId Int
  
  counterpartyType   CounterpartyType @relation(fields: [counterpartyTypeId], references: [id])

  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([counterpartyTypeId], map: "Counterparty_counterpartyTypeId_fkey")
}

model Unit {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  status    Status     @default(ACTIVE)
  comment   String     @default("")
  
  details   Detail[]
  materials Material[]
  products  Product[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model WarehouseGroup {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  parentId   Int         @default(1)
  
  warehouses Warehouse[]

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}
model Warehouse {
  id               Int             @id @default(autoincrement())
  name             String          @unique
  shortName        String          @default("")
  status           Status          @default(ACTIVE)
  comment          String          @default("")
  warehouseGroupId Int
  
  details          Detail[]
  materials        Material[]
  products         Product[]
  warehouseGroup   WarehouseGroup  @relation(fields: [warehouseGroupId], references: [id])

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([warehouseGroupId], map: "Warehouse_warehouseGroupId_fkey")
}

model MaterialGroup {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  parentId   Int        @default(1)
  
  materials  Material[]

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Material {
  id                 Int                 @id @default(autoincrement())
  image              String              @default("")
  name               String              @unique
  article            String              @default("")
  priceIn            Float               @default(0)
  priceOut           Float               @default(0)
  count              Int                 @default(0)
  minBalance         Int                 @default(0)
  comment            String              @default("")
  status             Status              @default(ACTIVE)
  materialGroupId    Int
  unitId             Int
  warehouseId        Int?
  weight             Float               @default(0)
  height             Float               @default(0)
  width              Float               @default(0)
  length             Float               @default(0)
  volume             Float               @default(0)
  
  materialGroup      MaterialGroup       @relation(fields: [materialGroupId], references: [id])
  unit               Unit                @relation(fields: [unitId], references: [id])
  warehouse          Warehouse?          @relation(fields: [warehouseId], references: [id])
  services           MaterialService[]
  detailMaterials    DetailMaterial[]
  productMaterials   ProductMaterial[]

  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([warehouseId], map: "Material_warehouseId_fkey")
  @@index([materialGroupId], map: "Material_materialGroupId_fkey")
  @@index([unitId], map: "Material_unitId_fkey")
}

model DetailGroup {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  parentId  Int        @default(1)

  details   Detail[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Detail {
  id            Int              @id @default(autoincrement())
  name          String           @unique
  description   String           @default("")
  priceIn       Int              @default(0)
  priceOut      Int              @default(0)
  count         Int              @default(0)
  status        Status           @default(ACTIVE)
  comment       String           @default("")
  image         String           @default("")
  article       String           @default("")
  minBalance    Int              @default(0)
  unitId        Int
  warehouseId   Int?
  detailGroupId Int
  
  unit          Unit             @relation(fields: [unitId], references: [id])
  warehouse     Warehouse?       @relation(fields: [warehouseId], references: [id])
  detailGroup   DetailGroup    @relation(fields: [detailGroupId], references: [id])
  materials     DetailMaterial[]
  services      DetailService[]
  products      ProductDetail[]

  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([detailGroupId], map: "Detail_detailGroupId_fkey")
  @@index([warehouseId], map: "Detail_warehouseId_fkey")
  @@index([unitId], map: "Detail_unitId_fkey")
}

model ProductGroup {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  parentId  Int        @default(1)
  
  products  Product[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
model Product {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  description      String            @default("")
  priceIn          Int               @default(0)
  priceOut         Int               @default(0)
  count            Int               @default(0)
  status           Status            @default(ACTIVE)
  comment          String            @default("")
  image            String            @default("")
  article          String            @default("")
  minBalance       Int               @default(0)
  unitId           Int
  warehouseId      Int?
  productGroupId   Int

  unit             Unit              @relation(fields: [unitId], references: [id])
  warehouse        Warehouse?        @relation(fields: [warehouseId], references: [id])
  productGroup     ProductGroup      @relation(fields: [productGroupId], references: [id])
  materials        ProductMaterial[]
  details          ProductDetail[]
  services         ProductService[]

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([warehouseId], map: "Product_warehouseId_fkey")
  @@index([unitId], map: "Product_unitId_fkey")
  @@index([productGroupId], map: "Product_productGroupId_fkey")
}

model Service {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String           @default("")
  price       Int              @default(0)
  status      Status           @default(ACTIVE)
  comment     String           @default("")
  
  materials   MaterialService[]
  details     DetailService[]
  products    ProductService[]

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProductMaterial {
  id         Int      @id @default(autoincrement())
  productId  Int
  materialId Int
  quantity   Int
  price      Int
  
  material   Material @relation(fields: [materialId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, materialId])
  @@index([productId], map: "ProductMaterial_productId_fkey")
  @@index([materialId], map: "ProductMaterial_materialId_fkey")
}

model ProductDetail {
  id        Int      @id @default(autoincrement())
  productId Int
  detailId  Int
  quantity  Int
  price     Int
 
  detail    Detail   @relation(fields: [detailId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, detailId])
  @@index([productId], map: "ProductDetail_productId_fkey")
  @@index([detailId], map: "ProductDetail_detailId_fkey")
}

model ProductService {
  id        Int      @id @default(autoincrement())
  productId Int
  serviceId Int
  quantity  Int
  price     Int
  
  product   Product  @relation(fields: [productId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, serviceId])
  @@index([productId], map: "ProductService_productId_fkey")
  @@index([serviceId], map: "ProductService_serviceId_fkey")
}

model DetailMaterial {
  id         Int      @id @default(autoincrement())
  detailId   Int
  materialId Int
  quantity   Int
  price      Int
  
  detail     Detail   @relation(fields: [detailId], references: [id])
  material   Material @relation(fields: [materialId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([detailId, materialId])
  @@index([detailId], map: "DetailMaterial_detailId_fkey")
  @@index([materialId], map: "DetailMaterial_materialId_fkey")
}

model DetailService {
  id        Int      @id @default(autoincrement())
  detailId  Int
  serviceId Int
  quantity  Int
  price     Int
  
  detail    Detail   @relation(fields: [detailId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([detailId, serviceId])
  @@index([detailId], map: "DetailService_detailId_fkey")
  @@index([serviceId], map: "DetailService_serviceId_fkey")
}

model MaterialService {
  id        Int      @id @default(autoincrement())
  materialId  Int
  serviceId Int
  quantity  Int
  price     Int
  
  material  Material   @relation(fields: [materialId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([materialId, serviceId])
  @@index([materialId], map: "MaterialService_materialId_fkey")
  @@index([serviceId], map: "MaterialService_serviceId_fkey")
}